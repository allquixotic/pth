   ____  _   _
  |  _ \| |_| |__                      ``All the good things you want
  | |_) | __| '_ \                       to do in your life have to be
  |  __/| |_| | | |                      started in the next few hours,
  |_|    \__|_| |_|                      days or weeks.''
                                                -- Tom DeMarco
  GNU Pth - The GNU Portable Threads

  INSTALL (Modernized Meson/Ninja Build)
  =======================================

  Overview
  --------

  This is the modernized version of GNU Pth that uses Meson/Ninja
  instead of autotools. To build and install Pth, perform the following
  steps in your shell:

    $ meson setup builddir [options]
    $ ninja -C builddir
    $ meson test -C builddir
    $ sudo ninja -C builddir install

  Quick Start
  -----------

  For most users, the default configuration is sufficient:

    $ meson setup builddir
    $ ninja -C builddir
    $ meson test -C builddir
    $ sudo ninja -C builddir install

  This will install Pth into /usr/local by default.

  Meson Options
  -------------

  --prefix=DIR: installation path prefix (default: /usr/local)
      This sets the base installation directory. Libraries will be
      installed to PREFIX/lib, headers to PREFIX/include, etc.

      Example:
        $ meson setup builddir --prefix=/opt/pth

  --buildtype=TYPE: build type (default: release)
      Available types:
      - plain: no extra flags
      - debug: debugging symbols, no optimization
      - debugoptimized: debugging symbols with optimization
      - release: optimization, no debugging symbols
      - minsize: optimized for size

      Example:
        $ meson setup builddir --buildtype=debug

  -Dc_std=STANDARD: C standard (default: c17)
      Available standards: c89, c99, c11, c17, c23

      Example:
        $ meson setup builddir -Dc_std=c17

  -Doptimization=LEVEL: optimization level (default: 2)
      Available levels: 0, g, 1, 2, 3, s

      Example:
        $ meson setup builddir -Doptimization=3

  -Dwarning_level=LEVEL: warning level (default: 2)
      Available levels: 0, 1, 2, 3

      Example:
        $ meson setup builddir -Dwarning_level=3

  -Dwerror=BOOL: treat warnings as errors (default: true)
      Values: true, false

      Example:
        $ meson setup builddir -Dwerror=false

  Build Configuration Examples
  -----------------------------

  Development build with debug symbols:
    $ meson setup builddir --buildtype=debug
    $ ninja -C builddir

  Release build with maximum optimization:
    $ meson setup builddir --buildtype=release -Doptimization=3
    $ ninja -C builddir

  Install to custom location:
    $ meson setup builddir --prefix=$HOME/.local
    $ ninja -C builddir install

  Build without treating warnings as errors:
    $ meson setup builddir -Dwerror=false
    $ ninja -C builddir

  Running Tests
  -------------

  All tests run automatically without user interaction:

    $ meson test -C builddir

  To run tests with verbose output:

    $ meson test -C builddir --verbose

  To run a specific test:

    $ meson test -C builddir test_std

  To run tests with timeout:

    $ meson test -C builddir --timeout-multiplier 2

  Compiling For Multiple Architectures
  -------------------------------------

  You can compile for multiple architectures by creating separate
  build directories:

    $ meson setup build-x86_64 --prefix=/opt/pth-x86_64
    $ ninja -C build-x86_64

  Reconfiguring Options
  ----------------------

  To change configuration options after initial setup:

    $ meson configure builddir --prefix=/usr
    $ meson configure builddir -Doptimization=3

  To see all current configuration options:

    $ meson configure builddir

  Cleaning Build
  --------------

  To clean build artifacts:

    $ ninja -C builddir clean

  To completely remove build directory:

    $ rm -rf builddir

  Requirements
  ------------

  - Meson 0.56.0 or later
  - Ninja 1.8 or later
  - C17-capable compiler (GCC 8+ or Clang 9+)
  - Linux kernel 4.0 or later
  - glibc 2.28 or later
  - x86_64 architecture

  To check if you have the required tools:

    $ meson --version
    $ ninja --version
    $ gcc --version     # or clang --version

  Installation
  ------------

  By default, 'ninja install' installs files to:

    /usr/local/lib/libpth.so        (shared library)
    /usr/local/lib/libpth.a         (static library)
    /usr/local/include/pth.h        (main header)
    /usr/local/include/pthread.h    (pthread emulation)
    /usr/local/lib/pkgconfig/pth.pc (pkg-config file)

  You can change the prefix:

    $ meson setup builddir --prefix=/opt/pth
    $ ninja -C builddir install

  Or use DESTDIR for staged installs:

    $ DESTDIR=/tmp/stage ninja -C builddir install

  Using Installed Library
  -----------------------

  With pkg-config:

    $ gcc -o myapp myapp.c $(pkg-config --cflags --libs pth)

  Manual linking:

    $ gcc -o myapp myapp.c -I/usr/local/include -L/usr/local/lib -lpth

  Troubleshooting
  ---------------

  Build fails with "meson: command not found":
    Install meson: sudo apt install meson ninja-build

  Build fails with "ninja: command not found":
    Install ninja: sudo apt install ninja-build

  Tests fail with timeout:
    Increase timeout: meson test -C builddir --timeout-multiplier 3

  Cannot find installed library:
    Add to LD_LIBRARY_PATH: export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    Or run ldconfig: sudo ldconfig

  Comparison with Autotools Build
  --------------------------------

  Old (autotools):              New (meson):
  ./configure --prefix=/opt     meson setup builddir --prefix=/opt
  make                          ninja -C builddir
  make test                     meson test -C builddir
  make install                  ninja -C builddir install

  The meson build is significantly faster (parallel by default) and
  produces identical library functionality with 100% API compatibility.
